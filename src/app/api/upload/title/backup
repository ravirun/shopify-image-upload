// import { NextResponse } from "next/server";
// import fetch from "node-fetch";
// import FormData from "form-data";
// import sharp from "sharp";

// // Utility for Shopify API Rate Limit Handling
// const rateLimitedFetch = async (url, options, retries = 5) => {
//   for (let i = 0; i < retries; i++) {
//     const response = await fetch(url, options);

//     if (response.status === 429) {
//       const retryAfter =
//         parseInt(response.headers.get("Retry-After") || "1", 10) * 1000;
//       console.log(`Rate limit hit, retrying after ${retryAfter}ms...`);
//       await new Promise((resolve) => setTimeout(resolve, retryAfter));
//       continue;
//     }

//     if (response.ok) return response;

//     throw new Error(`Request failed: ${response.statusText}`);
//   }

//   throw new Error("Maximum retries exceeded.");
// };

// // Fetch product by title
// const fetchProductByTitle = async (
//   productTitle,
//   SHOPIFY_STORE_URL,
//   SHOPIFY_ACCESS_TOKEN
// ) => {
//   const url = `${SHOPIFY_STORE_URL}/admin/api/2023-10/products.json?title=${encodeURIComponent(
//     productTitle
//   )}`;
//   const options = {
//     method: "GET",
//     headers: {
//       "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN,
//       "Content-Type": "application/json",
//     },
//   };

//   const response = await rateLimitedFetch(url, options);
//   const data = await response.json();
//   return data.products[0] || null; // Return first product
// };

// // Convert to WebP
// const convertToWebP = async (fileBuffer, fileName) => {
//   const fileExtension = fileName.split(".").pop().toLowerCase();

//   if (fileExtension === "webp") return fileBuffer;

//   let webpBuffer = await sharp(fileBuffer).webp({ quality: 80 }).toBuffer();

//   if (webpBuffer.length > 3 * 1024 * 1024) {
//     webpBuffer = await sharp(webpBuffer).webp({ quality: 60 }).toBuffer();
//   }

//   return webpBuffer;
// };

// // Upload image to Shopify
// const uploadImageToShopify = async (
//   productId,
//   fileBuffer,
//   fileName,
//   SHOPIFY_STORE_URL,
//   SHOPIFY_ACCESS_TOKEN
// ) => {
//   const url = `${SHOPIFY_STORE_URL}/admin/api/2023-10/products/${productId}/images.json`;
//   const formData = new FormData();
//   formData.append("image[attachment]", fileBuffer.toString("base64"));
//   formData.append("image[filename]", fileName);

//   const options = {
//     method: "POST",
//     headers: {
//       "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN,
//     },
//     body: formData,
//   };

//   const response = await rateLimitedFetch(url, options);
//   const data = await response.json();
//   return data.image || null;
// };

// // Process images concurrently
// const processConcurrently = async (tasks, limit) => {
//   const results = [];
//   const executing = [];

//   for (const task of tasks) {
//     const promise = task().then((result) => {
//       results.push(result);
//     });

//     executing.push(promise);
//     if (executing.length >= limit) {
//       await Promise.race(executing);
//       executing.splice(
//         executing.findIndex((p) => p === promise),
//         1
//       );
//     }
//   }

//   await Promise.all(executing);
//   return results;
// };

// // Main Handler with Time Tracking
// export const POST = async (req) => {
//   try {
//     // Get Shopify credentials from the form data (not JSON body)
//     const formData = await req.formData();
//     const shopifyStoreUrl = formData.get("storeUrl");
//     const shopifyAccessToken = formData.get("apiKey");

//     if (!shopifyStoreUrl || !shopifyAccessToken) {
//       return NextResponse.json(
//         { error: "Shopify credentials missing" },
//         { status: 400 }
//       );
//     }

//     const overallStartTime = Date.now(); // Start time for the whole process
//     const folderUploads = {};

//     const tasks = [];

//     for (const [key, file] of formData.entries()) {
//       tasks.push(async () => {
//         const startTime = Date.now(); // Track start time for each folder
//         const productTitle = key.split("/")[0];
//         const product = await fetchProductByTitle(
//           productTitle,
//           shopifyStoreUrl,
//           shopifyAccessToken
//         );

//         if (!product) {
//           console.log(`No product found for title: ${productTitle}`);
//           return;
//         }

//         const fileBuffer = Buffer.from(await file.arrayBuffer());
//         const convertedImageBuffer = await convertToWebP(fileBuffer, file.name);
//         const uploadedImage = await uploadImageToShopify(
//           product.id,
//           convertedImageBuffer,
//           file.name,
//           shopifyStoreUrl,
//           shopifyAccessToken
//         );

//         folderUploads[productTitle] = folderUploads[productTitle] || [];
//         folderUploads[productTitle].push(uploadedImage);

//         console.log(`Processed ${productTitle} in ${Date.now() - startTime}ms`); // Log folder processing time
//       });
//     }

//     await processConcurrently(tasks, 5); // Process 5 tasks concurrently

//     console.log(`Overall processing time: ${Date.now() - overallStartTime}ms`); // Log total processing time

//     return NextResponse.json({
//       message: "Images uploaded successfully.",
//       folderUploads,
//       processingTime: `${Date.now() - overallStartTime}ms`, // Return total processing time
//     });
//   } catch (error) {
//     console.error("Error during image upload:", error.message);
//     return NextResponse.json({ error: error.message }, { status: 500 });
//   }
// };
